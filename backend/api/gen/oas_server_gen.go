// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// ChatRoomsPost implements ChatRoomsPost operation.
	//
	// Create or get one-on-one chat room.
	//
	// POST /chat-rooms
	ChatRoomsPost(ctx context.Context, req *ChatRoomInput) (*ChatRoomsPostOK, error)
	// CreateGroupChatRoom implements CreateGroupChatRoom operation.
	//
	// Create a new group chat room.
	//
	// POST /chat-rooms/groups
	CreateGroupChatRoom(ctx context.Context, req *CreateGroupChatInput) (*ChatRoom, error)
	// GetChatRooms implements GetChatRooms operation.
	//
	// Get all chat rooms the user belongs to.
	//
	// GET /chat-rooms
	GetChatRooms(ctx context.Context) ([]ChatRoom, error)
	// LoginPost implements POST /login operation.
	//
	// Login.
	//
	// POST /login
	LoginPost(ctx context.Context, req *LoginRequest) (LoginPostRes, error)
	// MessagesGet implements GET /messages operation.
	//
	// Get messages with a user.
	//
	// GET /messages
	MessagesGet(ctx context.Context, params MessagesGetParams) ([]Message, error)
	// MessagesPost implements POST /messages operation.
	//
	// Send a message.
	//
	// POST /messages
	MessagesPost(ctx context.Context, req *MessageInput) (*Message, error)
	// SignupPost implements POST /signup operation.
	//
	// Create a new user.
	//
	// POST /signup
	SignupPost(ctx context.Context, req *UserInput) (SignupPostRes, error)
	// UsersGet implements GET /users operation.
	//
	// Get all users.
	//
	// GET /users
	UsersGet(ctx context.Context) (UsersGetRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
